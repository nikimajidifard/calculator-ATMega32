
AVRASM ver. 2.1.30  C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm Wed Jan 26 21:07:55 2022

C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF _counter_msb=R5
                 	.DEF _opcheck=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0100      	.DB  0x0,0x0,0x0,0x1
                 
                 _0x0:
000035 6425
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1135): warning: .cseg .db misalignment - padding zero byte
000036 0000      	.DB  0x25,0x64,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1139): warning: .cseg .db misalignment - padding zero byte
000038 0001      	.DB  0x1
                 _0x2020000:
000039 4e2d
00003a 4e41
00003b 4900
00003c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Desktop\03 Keypad\Software\List\program.asm(1142): warning: .cseg .db misalignment - padding zero byte
00003d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003e 0004      	.DW  0x04
00003f 0004      	.DW  0x04
000040 0066      	.DW  __REG_VARS*2
                 
000041 0002      	.DW  0x02
000042 0278      	.DW  __base_y_G100
000043 006e      	.DW  _0x2000003*2
                 
000044 0001      	.DW  0x01
000045 027c      	.DW  __seed_G101
000046 0070      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004f e1f8      	LDI  R31,0x18
000050 bdf1      	OUT  WDTCR,R31
000051 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 940c 0078 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;#define KEYPAD_R1 PORTD.0
                 ;#define KEYPAD_R2 PORTD.1
                 ;#define KEYPAD_R3 PORTD.2
                 ;#define KEYPAD_R4 PORTD.3
                 ;#define KEYPAD_C1 PIND.4
                 ;#define KEYPAD_C2 PIND.5
                 ;#define KEYPAD_C3 PIND.6
                 ;#define KEYPAD_C4 PIND.7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;
                 ;#define DIVIDE      '/'
                 ;#define MULTIPLY    '*'
                 ;#define SUM         '+'
                 ;#define MINUS       '-'
                 ;#define CLR         'c'
                 ;#define EQUAL       '='
                 ;
                 ;
                 ;unsigned char keypad_scan();
                 ;void compute();
                 ;//void clear();
                 ;
                 ;float number[5];
                 ;unsigned char operator[4];
                 ;int counter = 0;
                 ;unsigned char opcheck = 1;
                 ;
                 ;void main(void) {
                 ; 0000 002C void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002D     unsigned char key_res,i;
                 ; 0000 002E     DDRC = 0xFF;
                 ;	key_res -> R17
                 ;	i -> R16
000078 efef      	LDI  R30,LOW(255)
000079 bbe4      	OUT  0x14,R30
                 ; 0000 002F     DDRD = 0x0F;
00007a e0ef      	LDI  R30,LOW(15)
00007b bbe1      	OUT  0x11,R30
                 ; 0000 0030     PORTC = 0x00;
00007c e0e0      	LDI  R30,LOW(0)
00007d bbe5      	OUT  0x15,R30
                 ; 0000 0031 
                 ; 0000 0032     lcd_init(16);
00007e e1a0      	LDI  R26,LOW(16)
00007f 940e 028e 	CALL _lcd_init
                 ; 0000 0033     lcd_clear();
000081 940e 025c 	CALL _lcd_clear
                 ; 0000 0034 
                 ; 0000 0035     while (1) {
                 _0x3:
                 ; 0000 0036         key_res = keypad_scan();
000083 d066      	RCALL _keypad_scan
000084 2f1e      	MOV  R17,R30
                 ; 0000 0037 
                 ; 0000 0038         if (key_res != 255) {
000085 3f1f      	CPI  R17,255
000086 f409      	BRNE PC+2
000087 c060      	RJMP _0x6
                 ; 0000 0039             while (keypad_scan() != 255);
                 _0x7:
000088 d061      	RCALL _keypad_scan
000089 3fef      	CPI  R30,LOW(0xFF)
00008a f7e9      	BRNE _0x7
                 ; 0000 003A             delay_ms(20);
00008b e1a4      	LDI  R26,LOW(20)
00008c e0b0      	LDI  R27,0
00008d 940e 04f0 	CALL _delay_ms
                 ; 0000 003B             if(key_res >=0 && key_res <=9)
00008f 3010      	CPI  R17,0
000090 f010      	BRLO _0xB
000091 301a      	CPI  R17,10
000092 f008      	BRLO _0xC
                 _0xB:
000093 c02c      	RJMP _0xA
                 _0xC:
                 ; 0000 003C             {
                 ; 0000 003D             lcd_putchar(key_res + 48);
000094 2fa1      	MOV  R26,R17
000095 5da0      	SUBI R26,-LOW(48)
000096 940e 0268 	CALL _lcd_putchar
                 ; 0000 003E             number[counter] *= 10;
000098 940e 047d 	CALL SUBOPT_0x0
00009a 93ff      	PUSH R31
00009b 93ef      	PUSH R30
00009c 01df      	MOVW R26,R30
00009d 940e 06a0 	CALL __GETD1P
                +
00009f e0a0     +LDI R26 , LOW ( 0x41200000 )
0000a0 e0b0     +LDI R27 , HIGH ( 0x41200000 )
0000a1 e280     +LDI R24 , BYTE3 ( 0x41200000 )
0000a2 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
0000a3 940e 05ea 	CALL __MULF12
0000a5 91af      	POP  R26
0000a6 91bf      	POP  R27
0000a7 940e 06a6 	CALL __PUTDP1
                 ; 0000 003F             number[counter] += key_res;
0000a9 940e 047d 	CALL SUBOPT_0x0
0000ab 93ff      	PUSH R31
0000ac 93ef      	PUSH R30
0000ad 01df      	MOVW R26,R30
0000ae 940e 06a0 	CALL __GETD1P
0000b0 01df      	MOVW R26,R30
0000b1 01cb      	MOVW R24,R22
0000b2 2fe1      	MOV  R30,R17
0000b3 e0f0      	LDI  R31,0
0000b4 940e 0697 	CALL __CWD1
0000b6 940e 0560 	CALL __CDF1
0000b8 940e 059a 	CALL __ADDF12
0000ba 91af      	POP  R26
0000bb 91bf      	POP  R27
0000bc 940e 06a6 	CALL __PUTDP1
                 ; 0000 0040             opcheck = 0;
0000be 2477      	CLR  R7
                 ; 0000 0041             }
                 ; 0000 0042             else if(key_res == '=')
0000bf c028      	RJMP _0xD
                 _0xA:
0000c0 331d      	CPI  R17,61
0000c1 f451      	BRNE _0xE
                 ; 0000 0043             {
                 ; 0000 0044                 lcd_clear();
0000c2 d199      	RCALL _lcd_clear
                 ; 0000 0045                 compute();
0000c3 d07b      	RCALL _compute
                 ; 0000 0046                 for(i=0;i<5;i++)
0000c4 e000      	LDI  R16,LOW(0)
                 _0x10:
0000c5 3005      	CPI  R16,5
0000c6 f420      	BRSH _0x11
                 ; 0000 0047                     number[i]=0;
0000c7 940e 0485 	CALL SUBOPT_0x1
0000c9 5f0f      	SUBI R16,-1
0000ca cffa      	RJMP _0x10
                 _0x11:
                 ; 0000 0048 counter = 0;
0000cb c018      	RJMP _0x67
                 ; 0000 0049                 opcheck = 1;
                 ; 0000 004A 
                 ; 0000 004B             }
                 ; 0000 004C             else if(opcheck == 0)
                 _0xE:
0000cc 2077      	TST  R7
0000cd f461      	BRNE _0x13
                 ; 0000 004D             {
                 ; 0000 004E                 opcheck = 1;
0000ce e0e1      	LDI  R30,LOW(1)
0000cf 2e7e      	MOV  R7,R30
                 ; 0000 004F                 operator[counter] = key_res;
0000d0 01f2      	MOVW R30,R4
0000d1 58ec      	SUBI R30,LOW(-_operator)
0000d2 4ffd      	SBCI R31,HIGH(-_operator)
0000d3 8310      	ST   Z,R17
                 ; 0000 0050                 lcd_putchar(key_res);
0000d4 2fa1      	MOV  R26,R17
0000d5 d192      	RCALL _lcd_putchar
                 ; 0000 0051                 counter ++;
0000d6 01f2      	MOVW R30,R4
0000d7 9631      	ADIW R30,1
0000d8 012f      	MOVW R4,R30
                 ; 0000 0052             }
                 ; 0000 0053             else if(key_res == 'c')
0000d9 c00e      	RJMP _0x14
                 _0x13:
0000da 3613      	CPI  R17,99
0000db f461      	BRNE _0x15
                 ; 0000 0054             {
                 ; 0000 0055                 lcd_clear();
0000dc d17f      	RCALL _lcd_clear
                 ; 0000 0056                 for(i=0;i<5;i++)
0000dd e000      	LDI  R16,LOW(0)
                 _0x17:
0000de 3005      	CPI  R16,5
0000df f420      	BRSH _0x18
                 ; 0000 0057                     number[i]=0;
0000e0 940e 0485 	CALL SUBOPT_0x1
0000e2 5f0f      	SUBI R16,-1
0000e3 cffa      	RJMP _0x17
                 _0x18:
                 ; 0000 0058 counter = 0;
                 _0x67:
0000e4 2444      	CLR  R4
0000e5 2455      	CLR  R5
                 ; 0000 0059                 opcheck = 1;
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 2e7e      	MOV  R7,R30
                 ; 0000 005A             }
                 ; 0000 005B         }
                 _0x15:
                 _0x14:
                 _0xD:
                 ; 0000 005C     }
                 _0x6:
0000e8 cf9a      	RJMP _0x3
                 ; 0000 005D }
                 _0x19:
0000e9 cfff      	RJMP _0x19
                 ; .FEND
                 ;
                 ;
                 ;unsigned char keypad_scan() {
                 ; 0000 0060 unsigned char keypad_scan() {
                 _keypad_scan:
                 ; .FSTART _keypad_scan
                 ; 0000 0061     unsigned char result = 255;
                 ; 0000 0062 
                 ; 0000 0063     ////////////////////////  ROW1 ////////////////////////
                 ; 0000 0064     KEYPAD_R1 = 1;
0000ea 931a      	ST   -Y,R17
                 ;	result -> R17
0000eb ef1f      	LDI  R17,255
0000ec 9a90      	SBI  0x12,0
                 ; 0000 0065     KEYPAD_R2 = 0;
0000ed 9891      	CBI  0x12,1
                 ; 0000 0066     KEYPAD_R3 = 0;
0000ee 940e 0494 	CALL SUBOPT_0x2
                 ; 0000 0067     KEYPAD_R4 = 0;
                 ; 0000 0068 
                 ; 0000 0069     delay_ms(5);
                 ; 0000 006A     if (KEYPAD_C1)
0000f0 9b84      	SBIS 0x10,4
0000f1 c002      	RJMP _0x22
                 ; 0000 006B         result = KEYPAD_NUM7;
0000f2 e017      	LDI  R17,LOW(7)
                 ; 0000 006C     else if (KEYPAD_C2)
0000f3 c00a      	RJMP _0x23
                 _0x22:
0000f4 9b85      	SBIS 0x10,5
0000f5 c002      	RJMP _0x24
                 ; 0000 006D         result = KEYPAD_NUM8;
0000f6 e018      	LDI  R17,LOW(8)
                 ; 0000 006E     else if (KEYPAD_C3)
0000f7 c006      	RJMP _0x25
                 _0x24:
0000f8 9b86      	SBIS 0x10,6
0000f9 c002      	RJMP _0x26
                 ; 0000 006F         result = KEYPAD_NUM9;
0000fa e019      	LDI  R17,LOW(9)
                 ; 0000 0070     else if (KEYPAD_C4)
0000fb c002      	RJMP _0x27
                 _0x26:
0000fc 9987      	SBIC 0x10,7
                 ; 0000 0071         result = DIVIDE;
0000fd e21f      	LDI  R17,LOW(47)
                 ; 0000 0072 
                 ; 0000 0073 
                 ; 0000 0074     ////////////////////////  ROW2 ////////////////////////
                 ; 0000 0075     KEYPAD_R1 = 0;
                 _0x27:
                 _0x25:
                 _0x23:
0000fe 9890      	CBI  0x12,0
                 ; 0000 0076     KEYPAD_R2 = 1;
0000ff 9a91      	SBI  0x12,1
                 ; 0000 0077     KEYPAD_R3 = 0;
000100 940e 0494 	CALL SUBOPT_0x2
                 ; 0000 0078     KEYPAD_R4 = 0;
                 ; 0000 0079 
                 ; 0000 007A     delay_ms(5);
                 ; 0000 007B     if (KEYPAD_C1)
000102 9b84      	SBIS 0x10,4
000103 c002      	RJMP _0x31
                 ; 0000 007C         result = KEYPAD_NUM4;
000104 e014      	LDI  R17,LOW(4)
                 ; 0000 007D     else if (KEYPAD_C2)
000105 c00a      	RJMP _0x32
                 _0x31:
000106 9b85      	SBIS 0x10,5
000107 c002      	RJMP _0x33
                 ; 0000 007E         result = KEYPAD_NUM5;
000108 e015      	LDI  R17,LOW(5)
                 ; 0000 007F     else if (KEYPAD_C3)
000109 c006      	RJMP _0x34
                 _0x33:
00010a 9b86      	SBIS 0x10,6
00010b c002      	RJMP _0x35
                 ; 0000 0080         result = KEYPAD_NUM6;
00010c e016      	LDI  R17,LOW(6)
                 ; 0000 0081     else if (KEYPAD_C4)
00010d c002      	RJMP _0x36
                 _0x35:
00010e 9987      	SBIC 0x10,7
                 ; 0000 0082         result = MULTIPLY;
00010f e21a      	LDI  R17,LOW(42)
                 ; 0000 0083 
                 ; 0000 0084     ////////////////////////  ROW3 ////////////////////////
                 ; 0000 0085     KEYPAD_R1 = 0;
                 _0x36:
                 _0x34:
                 _0x32:
000110 9890      	CBI  0x12,0
                 ; 0000 0086     KEYPAD_R2 = 0;
000111 9891      	CBI  0x12,1
                 ; 0000 0087     KEYPAD_R3 = 1;
000112 9a92      	SBI  0x12,2
                 ; 0000 0088     KEYPAD_R4 = 0;
000113 9893      	CBI  0x12,3
                 ; 0000 0089 
                 ; 0000 008A     delay_ms(5);
000114 e0a5      	LDI  R26,LOW(5)
000115 e0b0      	LDI  R27,0
000116 940e 04f0 	CALL _delay_ms
                 ; 0000 008B     if (KEYPAD_C1)
000118 9b84      	SBIS 0x10,4
000119 c002      	RJMP _0x40
                 ; 0000 008C         result = KEYPAD_NUM1;
00011a e011      	LDI  R17,LOW(1)
                 ; 0000 008D     else if (KEYPAD_C2)
00011b c00a      	RJMP _0x41
                 _0x40:
00011c 9b85      	SBIS 0x10,5
00011d c002      	RJMP _0x42
                 ; 0000 008E         result = KEYPAD_NUM2;
00011e e012      	LDI  R17,LOW(2)
                 ; 0000 008F     else if (KEYPAD_C3)
00011f c006      	RJMP _0x43
                 _0x42:
000120 9b86      	SBIS 0x10,6
000121 c002      	RJMP _0x44
                 ; 0000 0090         result = KEYPAD_NUM3;
000122 e013      	LDI  R17,LOW(3)
                 ; 0000 0091     else if (KEYPAD_C4)
000123 c002      	RJMP _0x45
                 _0x44:
000124 9987      	SBIC 0x10,7
                 ; 0000 0092         result = MINUS;
000125 e21d      	LDI  R17,LOW(45)
                 ; 0000 0093 
                 ; 0000 0094     ////////////////////////  ROW4 ////////////////////////
                 ; 0000 0095     KEYPAD_R1 = 0;
                 _0x45:
                 _0x43:
                 _0x41:
000126 9890      	CBI  0x12,0
                 ; 0000 0096     KEYPAD_R2 = 0;
000127 9891      	CBI  0x12,1
                 ; 0000 0097     KEYPAD_R3 = 0;
000128 9892      	CBI  0x12,2
                 ; 0000 0098     KEYPAD_R4 = 1;
000129 9a93      	SBI  0x12,3
                 ; 0000 0099 
                 ; 0000 009A     delay_ms(5);
00012a e0a5      	LDI  R26,LOW(5)
00012b e0b0      	LDI  R27,0
00012c 940e 04f0 	CALL _delay_ms
                 ; 0000 009B     if (KEYPAD_C2)
00012e 9b85      	SBIS 0x10,5
00012f c002      	RJMP _0x4F
                 ; 0000 009C         result = KEYPAD_NUM0;
000130 e010      	LDI  R17,LOW(0)
                 ; 0000 009D     else if (KEYPAD_C1)
000131 c00a      	RJMP _0x50
                 _0x4F:
000132 9b84      	SBIS 0x10,4
000133 c002      	RJMP _0x51
                 ; 0000 009E         result = CLR;
000134 e613      	LDI  R17,LOW(99)
                 ; 0000 009F     else if (KEYPAD_C4)
000135 c006      	RJMP _0x52
                 _0x51:
000136 9b87      	SBIS 0x10,7
000137 c002      	RJMP _0x53
                 ; 0000 00A0         result = SUM;
000138 e21b      	LDI  R17,LOW(43)
                 ; 0000 00A1     else if (KEYPAD_C3)
000139 c002      	RJMP _0x54
                 _0x53:
00013a 9986      	SBIC 0x10,6
                 ; 0000 00A2         result = EQUAL;
00013b e31d      	LDI  R17,LOW(61)
                 ; 0000 00A3 
                 ; 0000 00A4     return result;
                 _0x54:
                 _0x52:
                 _0x50:
00013c 2fe1      	MOV  R30,R17
00013d 9119      	LD   R17,Y+
00013e 9508      	RET
                 ; 0000 00A5 }
                 ; .FEND
                 ;
                 ;void compute()
                 ; 0000 00A8 {
                 _compute:
                 ; .FSTART _compute
                 ; 0000 00A9     char operators[4]={'/','*','+','-'};
                 ; 0000 00AA     char i,j,k;
                 ; 0000 00AB     int temp;
                 ; 0000 00AC     unsigned char lcd[16];
                 ; 0000 00AD     for(k=0;k<4;k++)
00013f 9764      	SBIW R28,20
000140 e2ef      	LDI  R30,LOW(47)
000141 8be8      	STD  Y+16,R30
000142 e2ea      	LDI  R30,LOW(42)
000143 8be9      	STD  Y+17,R30
000144 e2eb      	LDI  R30,LOW(43)
000145 8bea      	STD  Y+18,R30
000146 e2ed      	LDI  R30,LOW(45)
000147 8beb      	STD  Y+19,R30
000148 940e 06c1 	CALL __SAVELOCR6
                 ;	operators -> Y+22
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	temp -> R20,R21
                 ;	lcd -> Y+6
00014a e030      	LDI  R19,LOW(0)
                 _0x57:
00014b 3034      	CPI  R19,4
00014c f008      	BRLO PC+2
00014d c0be      	RJMP _0x58
                 ; 0000 00AE     {
                 ; 0000 00AF         for(i=0;i<counter;i++)
00014e e010      	LDI  R17,LOW(0)
                 _0x5A:
00014f 01f2      	MOVW R30,R4
000150 2fa1      	MOV  R26,R17
000151 e0b0      	LDI  R27,0
000152 17ae      	CP   R26,R30
000153 07bf      	CPC  R27,R31
000154 f00c      	BRLT PC+2
000155 c0b4      	RJMP _0x5B
                 ; 0000 00B0         {
                 ; 0000 00B1             if(operator[i] == operators[k])
000156 2fe1      	MOV  R30,R17
000157 e0f0      	LDI  R31,0
000158 58ec      	SUBI R30,LOW(-_operator)
000159 4ffd      	SBCI R31,HIGH(-_operator)
00015a 8000      	LD   R0,Z
00015b 940e 049a 	CALL SUBOPT_0x3
00015d 91ec      	LD   R30,X
00015e 15e0      	CP   R30,R0
00015f f009      	BREQ PC+2
000160 c0a7      	RJMP _0x5C
                 ; 0000 00B2             {
                 ; 0000 00B3                 if (operators[k] == '/')
000161 940e 049a 	CALL SUBOPT_0x3
000163 91ac      	LD   R26,X
000164 32af      	CPI  R26,LOW(0x2F)
000165 f4c9      	BRNE _0x5D
                 ; 0000 00B4                 {
                 ; 0000 00B5                     number[i] = number[i] / number [i+1];
000166 940e 04a1 	CALL SUBOPT_0x4
000168 0fea      	ADD  R30,R26
000169 1ffb      	ADC  R31,R27
00016a 93ff      	PUSH R31
00016b 93ef      	PUSH R30
00016c 940e 04a1 	CALL SUBOPT_0x4
00016e 940e 04a8 	CALL SUBOPT_0x5
000170 937f      	PUSH R23
000171 936f      	PUSH R22
000172 93ff      	PUSH R31
000173 93ef      	PUSH R30
000174 940e 04ad 	CALL SUBOPT_0x6
000176 91af      	POP  R26
000177 91bf      	POP  R27
000178 918f      	POP  R24
000179 919f      	POP  R25
00017a 940e 0638 	CALL __DIVF21
00017c 91af      	POP  R26
00017d 91bf      	POP  R27
00017e c05b      	RJMP _0x68
                 ; 0000 00B6                 }
                 ; 0000 00B7                 else if(operators[k] == '*')
                 _0x5D:
00017f 940e 049a 	CALL SUBOPT_0x3
000181 91ac      	LD   R26,X
000182 32aa      	CPI  R26,LOW(0x2A)
000183 f4c9      	BRNE _0x5F
                 ; 0000 00B8                 {
                 ; 0000 00B9                     number[i] = number[i] * number [i+1];
000184 940e 04a1 	CALL SUBOPT_0x4
000186 0fea      	ADD  R30,R26
000187 1ffb      	ADC  R31,R27
000188 93ff      	PUSH R31
000189 93ef      	PUSH R30
00018a 940e 04a1 	CALL SUBOPT_0x4
00018c 940e 04a8 	CALL SUBOPT_0x5
00018e 937f      	PUSH R23
00018f 936f      	PUSH R22
000190 93ff      	PUSH R31
000191 93ef      	PUSH R30
000192 940e 04ad 	CALL SUBOPT_0x6
000194 91af      	POP  R26
000195 91bf      	POP  R27
000196 918f      	POP  R24
000197 919f      	POP  R25
000198 940e 05ea 	CALL __MULF12
00019a 91af      	POP  R26
00019b 91bf      	POP  R27
00019c c03d      	RJMP _0x68
                 ; 0000 00BA                 }
                 ; 0000 00BB                 else if(operators[k] == '+')
                 _0x5F:
00019d 940e 049a 	CALL SUBOPT_0x3
00019f 91ac      	LD   R26,X
0001a0 32ab      	CPI  R26,LOW(0x2B)
0001a1 f4c9      	BRNE _0x61
                 ; 0000 00BC                 {
                 ; 0000 00BD                     number[i] = number[i] + number [i+1];
0001a2 940e 04a1 	CALL SUBOPT_0x4
0001a4 0fea      	ADD  R30,R26
0001a5 1ffb      	ADC  R31,R27
0001a6 93ff      	PUSH R31
0001a7 93ef      	PUSH R30
0001a8 940e 04a1 	CALL SUBOPT_0x4
0001aa 940e 04a8 	CALL SUBOPT_0x5
0001ac 937f      	PUSH R23
0001ad 936f      	PUSH R22
0001ae 93ff      	PUSH R31
0001af 93ef      	PUSH R30
0001b0 940e 04ad 	CALL SUBOPT_0x6
0001b2 91af      	POP  R26
0001b3 91bf      	POP  R27
0001b4 918f      	POP  R24
0001b5 919f      	POP  R25
0001b6 940e 059a 	CALL __ADDF12
0001b8 91af      	POP  R26
0001b9 91bf      	POP  R27
0001ba c01f      	RJMP _0x68
                 ; 0000 00BE                 }
                 ; 0000 00BF                 else if (operators[k] == '-')
                 _0x61:
0001bb 940e 049a 	CALL SUBOPT_0x3
0001bd 91ac      	LD   R26,X
0001be 32ad      	CPI  R26,LOW(0x2D)
0001bf f4e1      	BRNE _0x63
                 ; 0000 00C0                 {
                 ; 0000 00C1                     number[i] = number[i] - number [i+1];
0001c0 940e 04a1 	CALL SUBOPT_0x4
0001c2 0fea      	ADD  R30,R26
0001c3 1ffb      	ADC  R31,R27
0001c4 93ff      	PUSH R31
0001c5 93ef      	PUSH R30
0001c6 940e 04a1 	CALL SUBOPT_0x4
0001c8 940e 04a8 	CALL SUBOPT_0x5
0001ca 937f      	PUSH R23
0001cb 936f      	PUSH R22
0001cc 93ff      	PUSH R31
0001cd 93ef      	PUSH R30
0001ce 940e 04ad 	CALL SUBOPT_0x6
0001d0 91af      	POP  R26
0001d1 91bf      	POP  R27
0001d2 918f      	POP  R24
0001d3 919f      	POP  R25
0001d4 940e 06b4 	CALL __SWAPD12
0001d6 940e 0593 	CALL __SUBF12
0001d8 91af      	POP  R26
0001d9 91bf      	POP  R27
                 _0x68:
0001da 940e 06a6 	CALL __PUTDP1
                 ; 0000 00C2                 }
                 ; 0000 00C3                 //shift nums to left in array
                 ; 0000 00C4                 for(j=i;j<counter-1;j++)
                 _0x63:
0001dc 2f01      	MOV  R16,R17
                 _0x65:
0001dd 01f2      	MOVW R30,R4
0001de 9731      	SBIW R30,1
0001df 2fa0      	MOV  R26,R16
0001e0 e0b0      	LDI  R27,0
0001e1 17ae      	CP   R26,R30
0001e2 07bf      	CPC  R27,R31
0001e3 f50c      	BRGE _0x66
                 ; 0000 00C5                 {
                 ; 0000 00C6                     operator[j] = operator[j+1];
0001e4 2fa0      	MOV  R26,R16
0001e5 e0b0      	LDI  R27,0
0001e6 58ac      	SUBI R26,LOW(-_operator)
0001e7 4fbd      	SBCI R27,HIGH(-_operator)
0001e8 2fe0      	MOV  R30,R16
0001e9 e0f0      	LDI  R31,0
                +
0001ea 58eb     +SUBI R30 , LOW ( - _operator - ( 1 ) )
0001eb 4ffd     +SBCI R31 , HIGH ( - _operator - ( 1 ) )
                 	__ADDW1MN _operator,1
0001ec 81e0      	LD   R30,Z
0001ed 93ec      	ST   X,R30
                 ; 0000 00C7                     number[j+1] = number[j+2];
0001ee 2fe0      	MOV  R30,R16
0001ef e0f0      	LDI  R31,0
0001f0 9631      	ADIW R30,1
0001f1 e6a0      	LDI  R26,LOW(_number)
0001f2 e0b2      	LDI  R27,HIGH(_number)
0001f3 940e 068d 	CALL __LSLW2
0001f5 0fea      	ADD  R30,R26
0001f6 1ffb      	ADC  R31,R27
0001f7 010f      	MOVW R0,R30
0001f8 2fa0      	MOV  R26,R16
0001f9 27bb      	CLR  R27
0001fa 940e 0692 	CALL __MULW2_4
                +
0001fc 59a8     +SUBI R26 , LOW ( - _number - ( 8 ) )
0001fd 4fbd     +SBCI R27 , HIGH ( - _number - ( 8 ) )
                 	__ADDW2MN _number,8
0001fe 940e 06a0 	CALL __GETD1P
000200 01d0      	MOVW R26,R0
000201 940e 06a6 	CALL __PUTDP1
                 ; 0000 00C8                 }
000203 5f0f      	SUBI R16,-1
000204 cfd8      	RJMP _0x65
                 _0x66:
                 ; 0000 00C9                 counter --;
000205 01f2      	MOVW R30,R4
000206 9731      	SBIW R30,1
000207 012f      	MOVW R4,R30
                 ; 0000 00CA             }
                 ; 0000 00CB         }
                 _0x5C:
000208 5f1f      	SUBI R17,-1
000209 cf45      	RJMP _0x5A
                 _0x5B:
                 ; 0000 00CC 
                 ; 0000 00CD 
                 ; 0000 00CE     }
00020a 5f3f      	SUBI R19,-1
00020b cf3f      	RJMP _0x57
                 _0x58:
                 ; 0000 00CF     temp = number[0];
00020c 91e0 0260 	LDS  R30,_number
00020e 91f0 0261 	LDS  R31,_number+1
000210 9160 0262 	LDS  R22,_number+2
000212 9170 0263 	LDS  R23,_number+3
000214 940e 0529 	CALL __CFD1
000216 01af      	MOVW R20,R30
                 ; 0000 00D0     sprintf(lcd,"%d",temp);
000217 01fe      	MOVW R30,R28
000218 9636      	ADIW R30,6
000219 93fa      	ST   -Y,R31
00021a 93ea      	ST   -Y,R30
                +
00021b e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00021c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00021d 93fa      	ST   -Y,R31
00021e 93ea      	ST   -Y,R30
00021f 01fa      	MOVW R30,R20
000220 940e 0697 	CALL __CWD1
000222 940e 06af 	CALL __PUTPARD1
000224 e084      	LDI  R24,4
000225 940e 0430 	CALL _sprintf
000227 9628      	ADIW R28,8
                 ; 0000 00D1         lcd_puts(lcd);
000228 01de      	MOVW R26,R28
000229 9616      	ADIW R26,6
00022a d052      	RCALL _lcd_puts
                 ; 0000 00D2 }
00022b 940e 06c8 	CALL __LOADLOCR6
00022d 966a      	ADIW R28,26
00022e 9508      	RET
                 ; .FEND
                 ;/*void clear()
                 ;{  char i;
                 ;    for(i=0;i<5;i++)
                 ;        number[i]=0;
                 ;    counter = 0;
                 ;    opcheck = 1;
                 ;
                 ;}*/
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00022f 93aa      	ST   -Y,R26
000230 b3e5      	IN   R30,0x15
000231 70ef      	ANDI R30,LOW(0xF)
000232 2fae      	MOV  R26,R30
000233 81e8      	LD   R30,Y
000234 7fe0      	ANDI R30,LOW(0xF0)
000235 2bea      	OR   R30,R26
000236 bbe5      	OUT  0x15,R30
                +
000237 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000238 958a     +DEC R24
000239 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00023a 9aaa      	SBI  0x15,2
                +
00023b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00023c 958a     +DEC R24
00023d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00023e 98aa      	CBI  0x15,2
                +
00023f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000240 958a     +DEC R24
000241 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000242 c077      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000243 93aa      	ST   -Y,R26
000244 81a8      	LD   R26,Y
000245 dfe9      	RCALL __lcd_write_nibble_G100
000246 81e8          ld    r30,y
000247 95e2          swap  r30
000248 83e8          st    y,r30
000249 81a8      	LD   R26,Y
00024a dfe4      	RCALL __lcd_write_nibble_G100
                +
00024b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00024c 958a     +DEC R24
00024d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00024e c06b      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00024f 93aa      	ST   -Y,R26
000250 81e8      	LD   R30,Y
000251 e0f0      	LDI  R31,0
000252 58e8      	SUBI R30,LOW(-__base_y_G100)
000253 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000254 81e0      	LD   R30,Z
000255 81a9      	LDD  R26,Y+1
000256 0fae      	ADD  R26,R30
000257 dfeb      	RCALL __lcd_write_data
000258 8069      	LDD  R6,Y+1
000259 8098      	LDD  R9,Y+0
00025a 9622      	ADIW R28,2
00025b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00025c e0a2      	LDI  R26,LOW(2)
00025d 940e 04b6 	CALL SUBOPT_0x7
00025f e0ac      	LDI  R26,LOW(12)
000260 dfe2      	RCALL __lcd_write_data
000261 e0a1      	LDI  R26,LOW(1)
000262 940e 04b6 	CALL SUBOPT_0x7
000264 e0e0      	LDI  R30,LOW(0)
000265 2e9e      	MOV  R9,R30
000266 2e6e      	MOV  R6,R30
000267 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000268 93aa      	ST   -Y,R26
000269 81a8      	LD   R26,Y
00026a 30aa      	CPI  R26,LOW(0xA)
00026b f011      	BREQ _0x2000005
00026c 1468      	CP   R6,R8
00026d f048      	BRLO _0x2000004
                 _0x2000005:
00026e e0e0      	LDI  R30,LOW(0)
00026f 93ea      	ST   -Y,R30
000270 9493      	INC  R9
000271 2da9      	MOV  R26,R9
000272 dfdc      	RCALL _lcd_gotoxy
000273 81a8      	LD   R26,Y
000274 30aa      	CPI  R26,LOW(0xA)
000275 f409      	BRNE _0x2000007
000276 c043      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
000277 9463      	INC  R6
000278 9aa8      	SBI  0x15,0
000279 81a8      	LD   R26,Y
00027a dfc8      	RCALL __lcd_write_data
00027b 98a8      	CBI  0x15,0
00027c c03d      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00027d 93ba      	ST   -Y,R27
00027e 93aa      	ST   -Y,R26
00027f 931a      	ST   -Y,R17
                 _0x2000008:
000280 81a9      	LDD  R26,Y+1
000281 81ba      	LDD  R27,Y+1+1
000282 91ed      	LD   R30,X+
000283 83a9      	STD  Y+1,R26
000284 83ba      	STD  Y+1+1,R27
000285 2f1e      	MOV  R17,R30
000286 30e0      	CPI  R30,0
000287 f019      	BREQ _0x200000A
000288 2fa1      	MOV  R26,R17
000289 dfde      	RCALL _lcd_putchar
00028a cff5      	RJMP _0x2000008
                 _0x200000A:
00028b 8118      	LDD  R17,Y+0
00028c 9623      	ADIW R28,3
00028d 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00028e 93aa      	ST   -Y,R26
00028f b3e4      	IN   R30,0x14
000290 6fe0      	ORI  R30,LOW(0xF0)
000291 bbe4      	OUT  0x14,R30
000292 9aa2      	SBI  0x14,2
000293 9aa0      	SBI  0x14,0
000294 9aa1      	SBI  0x14,1
000295 98aa      	CBI  0x15,2
000296 98a8      	CBI  0x15,0
000297 98a9      	CBI  0x15,1
000298 8088      	LDD  R8,Y+0
000299 81e8      	LD   R30,Y
00029a 58e0      	SUBI R30,-LOW(128)
                +
00029b 93e0 027a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00029d 81e8      	LD   R30,Y
00029e 54e0      	SUBI R30,-LOW(192)
                +
00029f 93e0 027b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002a1 e1a4      	LDI  R26,LOW(20)
0002a2 e0b0      	LDI  R27,0
0002a3 940e 04f0 	CALL _delay_ms
0002a5 940e 04bc 	CALL SUBOPT_0x8
0002a7 940e 04bc 	CALL SUBOPT_0x8
0002a9 940e 04bc 	CALL SUBOPT_0x8
0002ab e2a0      	LDI  R26,LOW(32)
0002ac df82      	RCALL __lcd_write_nibble_G100
                +
0002ad ec88     +LDI R24 , LOW ( 200 )
0002ae e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002af 9701     +SBIW R24 , 1
0002b0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002b1 e2a8      	LDI  R26,LOW(40)
0002b2 df90      	RCALL __lcd_write_data
0002b3 e0a4      	LDI  R26,LOW(4)
0002b4 df8e      	RCALL __lcd_write_data
0002b5 e8a5      	LDI  R26,LOW(133)
0002b6 df8c      	RCALL __lcd_write_data
0002b7 e0a6      	LDI  R26,LOW(6)
0002b8 df8a      	RCALL __lcd_write_data
0002b9 dfa2      	RCALL _lcd_clear
                 _0x20C0002:
0002ba 9621      	ADIW R28,1
0002bb 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0002bc 93ba      	ST   -Y,R27
0002bd 93aa      	ST   -Y,R26
0002be 931a      	ST   -Y,R17
0002bf 930a      	ST   -Y,R16
0002c0 81aa      	LDD  R26,Y+2
0002c1 81bb      	LDD  R27,Y+2+1
0002c2 9612      	ADIW R26,2
0002c3 940e 069c 	CALL __GETW1P
0002c5 9730      	SBIW R30,0
0002c6 f159      	BREQ _0x2040010
0002c7 81aa      	LDD  R26,Y+2
0002c8 81bb      	LDD  R27,Y+2+1
0002c9 9614      	ADIW R26,4
0002ca 940e 069c 	CALL __GETW1P
0002cc 018f      	MOVW R16,R30
0002cd 9730      	SBIW R30,0
0002ce f061      	BREQ _0x2040012
                +
0002cf 3002     +CPI R16 , LOW ( 2 )
0002d0 e0e0     +LDI R30 , HIGH ( 2 )
0002d1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002d2 f098      	BRLO _0x2040013
0002d3 01f8      	MOVW R30,R16
0002d4 9731      	SBIW R30,1
0002d5 018f      	MOVW R16,R30
                +
0002d6 81aa     +LDD R26 , Y + 2
0002d7 81bb     +LDD R27 , Y + 2 + 1
0002d8 9614     +ADIW R26 , 4
0002d9 93ed     +ST X + , R30
0002da 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0002db 81aa      	LDD  R26,Y+2
0002dc 81bb      	LDD  R27,Y+2+1
0002dd 9612      	ADIW R26,2
0002de 91ed      	LD   R30,X+
0002df 91fd      	LD   R31,X+
0002e0 9631      	ADIW R30,1
0002e1 93fe      	ST   -X,R31
0002e2 93ee      	ST   -X,R30
0002e3 9731      	SBIW R30,1
0002e4 81ac      	LDD  R26,Y+4
0002e5 83a0      	STD  Z+0,R26
                 _0x2040013:
0002e6 81aa      	LDD  R26,Y+2
0002e7 81bb      	LDD  R27,Y+2+1
0002e8 940e 069c 	CALL __GETW1P
0002ea 23ff      	TST  R31
0002eb f02a      	BRMI _0x2040014
0002ec 91ed      	LD   R30,X+
0002ed 91fd      	LD   R31,X+
0002ee 9631      	ADIW R30,1
0002ef 93fe      	ST   -X,R31
0002f0 93ee      	ST   -X,R30
                 _0x2040014:
0002f1 c006      	RJMP _0x2040015
                 _0x2040010:
0002f2 81aa      	LDD  R26,Y+2
0002f3 81bb      	LDD  R27,Y+2+1
0002f4 efef      	LDI  R30,LOW(65535)
0002f5 efff      	LDI  R31,HIGH(65535)
0002f6 93ed      	ST   X+,R30
0002f7 93fc      	ST   X,R31
                 _0x2040015:
0002f8 8119      	LDD  R17,Y+1
0002f9 8108      	LDD  R16,Y+0
0002fa 9625      	ADIW R28,5
0002fb 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0002fc 93ba      	ST   -Y,R27
0002fd 93aa      	ST   -Y,R26
0002fe 9726      	SBIW R28,6
0002ff 940e 06c1 	CALL __SAVELOCR6
000301 e010      	LDI  R17,0
000302 85ac      	LDD  R26,Y+12
000303 85bd      	LDD  R27,Y+12+1
000304 e0e0      	LDI  R30,LOW(0)
000305 e0f0      	LDI  R31,HIGH(0)
000306 93ed      	ST   X+,R30
000307 93fc      	ST   X,R31
                 _0x2040016:
000308 89ea      	LDD  R30,Y+18
000309 89fb      	LDD  R31,Y+18+1
00030a 9631      	ADIW R30,1
00030b 8bea      	STD  Y+18,R30
00030c 8bfb      	STD  Y+18+1,R31
00030d 9731      	SBIW R30,1
00030e 91e4      	LPM  R30,Z
00030f 2f2e      	MOV  R18,R30
000310 30e0      	CPI  R30,0
000311 f409      	BRNE PC+2
000312 c115      	RJMP _0x2040018
000313 2fe1      	MOV  R30,R17
000314 30e0      	CPI  R30,0
000315 f439      	BRNE _0x204001C
000316 3225      	CPI  R18,37
000317 f411      	BRNE _0x204001D
000318 e011      	LDI  R17,LOW(1)
000319 c002      	RJMP _0x204001E
                 _0x204001D:
00031a 940e 04c4 	CALL SUBOPT_0x9
                 _0x204001E:
00031c c10a      	RJMP _0x204001B
                 _0x204001C:
00031d 30e1      	CPI  R30,LOW(0x1)
00031e f4a9      	BRNE _0x204001F
00031f 3225      	CPI  R18,37
000320 f419      	BRNE _0x2040020
000321 940e 04c4 	CALL SUBOPT_0x9
000323 c102      	RJMP _0x20400CC
                 _0x2040020:
000324 e012      	LDI  R17,LOW(2)
000325 e040      	LDI  R20,LOW(0)
000326 e000      	LDI  R16,LOW(0)
000327 322d      	CPI  R18,45
000328 f411      	BRNE _0x2040021
000329 e001      	LDI  R16,LOW(1)
00032a c0fc      	RJMP _0x204001B
                 _0x2040021:
00032b 322b      	CPI  R18,43
00032c f411      	BRNE _0x2040022
00032d e24b      	LDI  R20,LOW(43)
00032e c0f8      	RJMP _0x204001B
                 _0x2040022:
00032f 3220      	CPI  R18,32
000330 f411      	BRNE _0x2040023
000331 e240      	LDI  R20,LOW(32)
000332 c0f4      	RJMP _0x204001B
                 _0x2040023:
000333 c002      	RJMP _0x2040024
                 _0x204001F:
000334 30e2      	CPI  R30,LOW(0x2)
000335 f439      	BRNE _0x2040025
                 _0x2040024:
000336 e050      	LDI  R21,LOW(0)
000337 e013      	LDI  R17,LOW(3)
000338 3320      	CPI  R18,48
000339 f411      	BRNE _0x2040026
00033a 6800      	ORI  R16,LOW(128)
00033b c0eb      	RJMP _0x204001B
                 _0x2040026:
00033c c003      	RJMP _0x2040027
                 _0x2040025:
00033d 30e3      	CPI  R30,LOW(0x3)
00033e f009      	BREQ PC+2
00033f c0e7      	RJMP _0x204001B
                 _0x2040027:
000340 3320      	CPI  R18,48
000341 f010      	BRLO _0x204002A
000342 332a      	CPI  R18,58
000343 f008      	BRLO _0x204002B
                 _0x204002A:
000344 c007      	RJMP _0x2040029
                 _0x204002B:
000345 e0aa      	LDI  R26,LOW(10)
000346 9f5a      	MUL  R21,R26
000347 2d50      	MOV  R21,R0
000348 2fe2      	MOV  R30,R18
000349 53e0      	SUBI R30,LOW(48)
00034a 0f5e      	ADD  R21,R30
00034b c0db      	RJMP _0x204001B
                 _0x2040029:
00034c 2fe2      	MOV  R30,R18
00034d 36e3      	CPI  R30,LOW(0x63)
00034e f449      	BRNE _0x204002F
00034f 940e 04cb 	CALL SUBOPT_0xA
000351 89e8      	LDD  R30,Y+16
000352 89f9      	LDD  R31,Y+16+1
000353 81a4      	LDD  R26,Z+4
000354 93aa      	ST   -Y,R26
000355 940e 04d1 	CALL SUBOPT_0xB
000357 c0ce      	RJMP _0x2040030
                 _0x204002F:
000358 37e3      	CPI  R30,LOW(0x73)
000359 f441      	BRNE _0x2040032
00035a 940e 04cb 	CALL SUBOPT_0xA
00035c 940e 04d7 	CALL SUBOPT_0xC
00035e 940e 0464 	CALL _strlen
000360 2f1e      	MOV  R17,R30
000361 c00a      	RJMP _0x2040033
                 _0x2040032:
000362 37e0      	CPI  R30,LOW(0x70)
000363 f461      	BRNE _0x2040035
000364 940e 04cb 	CALL SUBOPT_0xA
000366 940e 04d7 	CALL SUBOPT_0xC
000368 940e 0470 	CALL _strlenf
00036a 2f1e      	MOV  R17,R30
00036b 6008      	ORI  R16,LOW(8)
                 _0x2040033:
00036c 6002      	ORI  R16,LOW(2)
00036d 770f      	ANDI R16,LOW(127)
00036e e030      	LDI  R19,LOW(0)
00036f c034      	RJMP _0x2040036
                 _0x2040035:
000370 36e4      	CPI  R30,LOW(0x64)
000371 f011      	BREQ _0x2040039
000372 36e9      	CPI  R30,LOW(0x69)
000373 f411      	BRNE _0x204003A
                 _0x2040039:
000374 6004      	ORI  R16,LOW(4)
000375 c002      	RJMP _0x204003B
                 _0x204003A:
000376 37e5      	CPI  R30,LOW(0x75)
000377 f431      	BRNE _0x204003C
                 _0x204003B:
000378 e5e4      	LDI  R30,LOW(_tbl10_G102*2)
000379 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
00037a 83ee      	STD  Y+6,R30
00037b 83ff      	STD  Y+6+1,R31
00037c e015      	LDI  R17,LOW(5)
00037d c00c      	RJMP _0x204003D
                 _0x204003C:
00037e 35e8      	CPI  R30,LOW(0x58)
00037f f411      	BRNE _0x204003F
000380 6008      	ORI  R16,LOW(8)
000381 c003      	RJMP _0x2040040
                 _0x204003F:
000382 37e8      	CPI  R30,LOW(0x78)
000383 f009      	BREQ PC+2
000384 c0a1      	RJMP _0x2040071
                 _0x2040040:
000385 e5ee      	LDI  R30,LOW(_tbl16_G102*2)
000386 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
000387 83ee      	STD  Y+6,R30
000388 83ff      	STD  Y+6+1,R31
000389 e014      	LDI  R17,LOW(4)
                 _0x204003D:
00038a ff02      	SBRS R16,2
00038b c014      	RJMP _0x2040042
00038c 940e 04cb 	CALL SUBOPT_0xA
00038e 940e 04e1 	CALL SUBOPT_0xD
000390 85ab      	LDD  R26,Y+11
000391 23aa      	TST  R26
000392 f43a      	BRPL _0x2040043
000393 85ea      	LDD  R30,Y+10
000394 85fb      	LDD  R31,Y+10+1
000395 940e 0681 	CALL __ANEGW1
000397 87ea      	STD  Y+10,R30
000398 87fb      	STD  Y+10+1,R31
000399 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
00039a 3040      	CPI  R20,0
00039b f011      	BREQ _0x2040044
00039c 5f1f      	SUBI R17,-LOW(1)
00039d c001      	RJMP _0x2040045
                 _0x2040044:
00039e 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
00039f c004      	RJMP _0x2040046
                 _0x2040042:
0003a0 940e 04cb 	CALL SUBOPT_0xA
0003a2 940e 04e1 	CALL SUBOPT_0xD
                 _0x2040046:
                 _0x2040036:
0003a4 fd00      	SBRC R16,0
0003a5 c011      	RJMP _0x2040047
                 _0x2040048:
0003a6 1715      	CP   R17,R21
0003a7 f478      	BRSH _0x204004A
0003a8 ff07      	SBRS R16,7
0003a9 c008      	RJMP _0x204004B
0003aa ff02      	SBRS R16,2
0003ab c004      	RJMP _0x204004C
0003ac 7f0b      	ANDI R16,LOW(251)
0003ad 2f24      	MOV  R18,R20
0003ae 5011      	SUBI R17,LOW(1)
0003af c001      	RJMP _0x204004D
                 _0x204004C:
0003b0 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0003b1 c001      	RJMP _0x204004E
                 _0x204004B:
0003b2 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0003b3 940e 04c4 	CALL SUBOPT_0x9
0003b5 5051      	SUBI R21,LOW(1)
0003b6 cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0003b7 2f31      	MOV  R19,R17
0003b8 ff01      	SBRS R16,1
0003b9 c017      	RJMP _0x204004F
                 _0x2040050:
0003ba 3030      	CPI  R19,0
0003bb f0a1      	BREQ _0x2040052
0003bc ff03      	SBRS R16,3
0003bd c006      	RJMP _0x2040053
0003be 81ee      	LDD  R30,Y+6
0003bf 81ff      	LDD  R31,Y+6+1
0003c0 9125      	LPM  R18,Z+
0003c1 83ee      	STD  Y+6,R30
0003c2 83ff      	STD  Y+6+1,R31
0003c3 c005      	RJMP _0x2040054
                 _0x2040053:
0003c4 81ae      	LDD  R26,Y+6
0003c5 81bf      	LDD  R27,Y+6+1
0003c6 912d      	LD   R18,X+
0003c7 83ae      	STD  Y+6,R26
0003c8 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0003c9 940e 04c4 	CALL SUBOPT_0x9
0003cb 3050      	CPI  R21,0
0003cc f009      	BREQ _0x2040055
0003cd 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0003ce 5031      	SUBI R19,LOW(1)
0003cf cfea      	RJMP _0x2040050
                 _0x2040052:
0003d0 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0003d1 e320      	LDI  R18,LOW(48)
0003d2 81ee      	LDD  R30,Y+6
0003d3 81ff      	LDD  R31,Y+6+1
0003d4 940e 06ab 	CALL __GETW1PF
0003d6 87e8      	STD  Y+8,R30
0003d7 87f9      	STD  Y+8+1,R31
0003d8 81ee      	LDD  R30,Y+6
0003d9 81ff      	LDD  R31,Y+6+1
0003da 9632      	ADIW R30,2
0003db 83ee      	STD  Y+6,R30
0003dc 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0003dd 85e8      	LDD  R30,Y+8
0003de 85f9      	LDD  R31,Y+8+1
0003df 85aa      	LDD  R26,Y+10
0003e0 85bb      	LDD  R27,Y+10+1
0003e1 17ae      	CP   R26,R30
0003e2 07bf      	CPC  R27,R31
0003e3 f050      	BRLO _0x204005C
0003e4 5f2f      	SUBI R18,-LOW(1)
0003e5 85a8      	LDD  R26,Y+8
0003e6 85b9      	LDD  R27,Y+8+1
0003e7 85ea      	LDD  R30,Y+10
0003e8 85fb      	LDD  R31,Y+10+1
0003e9 1bea      	SUB  R30,R26
0003ea 0bfb      	SBC  R31,R27
0003eb 87ea      	STD  Y+10,R30
0003ec 87fb      	STD  Y+10+1,R31
0003ed cfef      	RJMP _0x204005A
                 _0x204005C:
0003ee 332a      	CPI  R18,58
0003ef f028      	BRLO _0x204005D
0003f0 ff03      	SBRS R16,3
0003f1 c002      	RJMP _0x204005E
0003f2 5f29      	SUBI R18,-LOW(7)
0003f3 c001      	RJMP _0x204005F
                 _0x204005E:
0003f4 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0003f5 fd04      	SBRC R16,4
0003f6 c01a      	RJMP _0x2040061
0003f7 3321      	CPI  R18,49
0003f8 f420      	BRSH _0x2040063
0003f9 85a8      	LDD  R26,Y+8
0003fa 85b9      	LDD  R27,Y+8+1
0003fb 9711      	SBIW R26,1
0003fc f409      	BRNE _0x2040062
                 _0x2040063:
0003fd c009      	RJMP _0x20400CD
                 _0x2040062:
0003fe 1753      	CP   R21,R19
0003ff f010      	BRLO _0x2040067
000400 ff00      	SBRS R16,0
000401 c001      	RJMP _0x2040068
                 _0x2040067:
000402 c013      	RJMP _0x2040066
                 _0x2040068:
000403 e220      	LDI  R18,LOW(32)
000404 ff07      	SBRS R16,7
000405 c00b      	RJMP _0x2040069
000406 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
000407 6100      	ORI  R16,LOW(16)
000408 ff02      	SBRS R16,2
000409 c007      	RJMP _0x204006A
00040a 7f0b      	ANDI R16,LOW(251)
00040b 934a      	ST   -Y,R20
00040c 940e 04d1 	CALL SUBOPT_0xB
00040e 3050      	CPI  R21,0
00040f f009      	BREQ _0x204006B
000410 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000411 940e 04c4 	CALL SUBOPT_0x9
000413 3050      	CPI  R21,0
000414 f009      	BREQ _0x204006C
000415 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000416 5031      	SUBI R19,LOW(1)
000417 85a8      	LDD  R26,Y+8
000418 85b9      	LDD  R27,Y+8+1
000419 9712      	SBIW R26,2
00041a f008      	BRLO _0x2040059
00041b cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
00041c ff00      	SBRS R16,0
00041d c008      	RJMP _0x204006D
                 _0x204006E:
00041e 3050      	CPI  R21,0
00041f f031      	BREQ _0x2040070
000420 5051      	SUBI R21,LOW(1)
000421 e2e0      	LDI  R30,LOW(32)
000422 93ea      	ST   -Y,R30
000423 940e 04d1 	CALL SUBOPT_0xB
000425 cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000426 e010      	LDI  R17,LOW(0)
                 _0x204001B:
000427 cee0      	RJMP _0x2040016
                 _0x2040018:
000428 85ac      	LDD  R26,Y+12
000429 85bd      	LDD  R27,Y+12+1
00042a 940e 069c 	CALL __GETW1P
00042c 940e 06c8 	CALL __LOADLOCR6
00042e 9664      	ADIW R28,20
00042f 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000430 92ff      	PUSH R15
000431 2ef8      	MOV  R15,R24
000432 9726      	SBIW R28,6
000433 940e 06c3 	CALL __SAVELOCR4
000435 940e 04e9 	CALL SUBOPT_0xE
000437 9730      	SBIW R30,0
000438 f419      	BRNE _0x2040072
000439 efef      	LDI  R30,LOW(65535)
00043a efff      	LDI  R31,HIGH(65535)
00043b c023      	RJMP _0x20C0001
                 _0x2040072:
00043c 01de      	MOVW R26,R28
00043d 9616      	ADIW R26,6
00043e 940e 067d 	CALL __ADDW2R15
000440 018d      	MOVW R16,R26
000441 940e 04e9 	CALL SUBOPT_0xE
000443 83ee      	STD  Y+6,R30
000444 83ff      	STD  Y+6+1,R31
000445 e0e0      	LDI  R30,LOW(0)
000446 87e8      	STD  Y+8,R30
000447 87e9      	STD  Y+8+1,R30
000448 01de      	MOVW R26,R28
000449 961a      	ADIW R26,10
00044a 940e 067d 	CALL __ADDW2R15
00044c 940e 069c 	CALL __GETW1P
00044e 93fa      	ST   -Y,R31
00044f 93ea      	ST   -Y,R30
000450 931a      	ST   -Y,R17
000451 930a      	ST   -Y,R16
000452 ebec      	LDI  R30,LOW(_put_buff_G102)
000453 e0f2      	LDI  R31,HIGH(_put_buff_G102)
000454 93fa      	ST   -Y,R31
000455 93ea      	ST   -Y,R30
000456 01de      	MOVW R26,R28
000457 961a      	ADIW R26,10
000458 dea3      	RCALL __print_G102
000459 019f      	MOVW R18,R30
00045a 81ae      	LDD  R26,Y+6
00045b 81bf      	LDD  R27,Y+6+1
00045c e0e0      	LDI  R30,LOW(0)
00045d 93ec      	ST   X,R30
00045e 01f9      	MOVW R30,R18
                 _0x20C0001:
00045f 940e 06ca 	CALL __LOADLOCR4
000461 962a      	ADIW R28,10
000462 90ff      	POP  R15
000463 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000464 93ba      	ST   -Y,R27
000465 93aa      	ST   -Y,R26
000466 91a9          ld   r26,y+
000467 91b9          ld   r27,y+
000468 27ee          clr  r30
000469 27ff          clr  r31
                 strlen0:
00046a 916d          ld   r22,x+
00046b 2366          tst  r22
00046c f011          breq strlen1
00046d 9631          adiw r30,1
00046e cffb          rjmp strlen0
                 strlen1:
00046f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000470 93ba      	ST   -Y,R27
000471 93aa      	ST   -Y,R26
000472 27aa          clr  r26
000473 27bb          clr  r27
000474 91e9          ld   r30,y+
000475 91f9          ld   r31,y+
                 strlenf0:
000476 9005      	lpm  r0,z+
000477 2000          tst  r0
000478 f011          breq strlenf1
000479 9611          adiw r26,1
00047a cffb          rjmp strlenf0
                 strlenf1:
00047b 01fd          movw r30,r26
00047c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _number:
000260           	.BYTE 0x14
                 _operator:
000274           	.BYTE 0x4
                 __base_y_G100:
000278           	.BYTE 0x4
                 __seed_G101:
00027c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00047d 01f2      	MOVW R30,R4
00047e e6a0      	LDI  R26,LOW(_number)
00047f e0b2      	LDI  R27,HIGH(_number)
000480 940e 068d 	CALL __LSLW2
000482 0fea      	ADD  R30,R26
000483 1ffb      	ADC  R31,R27
000484 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000485 2fe0      	MOV  R30,R16
000486 e6a0      	LDI  R26,LOW(_number)
000487 e0b2      	LDI  R27,HIGH(_number)
000488 e0f0      	LDI  R31,0
000489 940e 068d 	CALL __LSLW2
00048b 0fae      	ADD  R26,R30
00048c 1fbf      	ADC  R27,R31
                +
00048d e0e0     +LDI R30 , LOW ( 0x0 )
00048e e0f0     +LDI R31 , HIGH ( 0x0 )
00048f e060     +LDI R22 , BYTE3 ( 0x0 )
000490 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000491 940e 06a6 	CALL __PUTDP1
000493 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000494 9892      	CBI  0x12,2
000495 9893      	CBI  0x12,3
000496 e0a5      	LDI  R26,LOW(5)
000497 e0b0      	LDI  R27,0
000498 940c 04f0 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00049a 2fe3      	MOV  R30,R19
00049b e0f0      	LDI  R31,0
00049c 01de      	MOVW R26,R28
00049d 9656      	ADIW R26,22
00049e 0fae      	ADD  R26,R30
00049f 1fbf      	ADC  R27,R31
0004a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x4:
0004a1 2fe1      	MOV  R30,R17
0004a2 e6a0      	LDI  R26,LOW(_number)
0004a3 e0b2      	LDI  R27,HIGH(_number)
0004a4 e0f0      	LDI  R31,0
0004a5 940e 068d 	CALL __LSLW2
0004a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0004a8 0fae      	ADD  R26,R30
0004a9 1fbf      	ADC  R27,R31
0004aa 940e 06a0 	CALL __GETD1P
0004ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
0004ad 2fa1      	MOV  R26,R17
0004ae 27bb      	CLR  R27
0004af 940e 0692 	CALL __MULW2_4
                +
0004b1 59ac     +SUBI R26 , LOW ( - _number - ( 4 ) )
0004b2 4fbd     +SBCI R27 , HIGH ( - _number - ( 4 ) )
                 	__ADDW2MN _number,4
0004b3 940e 06a0 	CALL __GETD1P
0004b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0004b6 940e 0243 	CALL __lcd_write_data
0004b8 e0a3      	LDI  R26,LOW(3)
0004b9 e0b0      	LDI  R27,0
0004ba 940c 04f0 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0004bc e3a0      	LDI  R26,LOW(48)
0004bd 940e 022f 	CALL __lcd_write_nibble_G100
                +
0004bf ec88     +LDI R24 , LOW ( 200 )
0004c0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004c1 9701     +SBIW R24 , 1
0004c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
0004c4 932a      	ST   -Y,R18
0004c5 85ad      	LDD  R26,Y+13
0004c6 85be      	LDD  R27,Y+13+1
0004c7 85ef      	LDD  R30,Y+15
0004c8 89f8      	LDD  R31,Y+15+1
0004c9 9509      	ICALL
0004ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
0004cb 89e8      	LDD  R30,Y+16
0004cc 89f9      	LDD  R31,Y+16+1
0004cd 9734      	SBIW R30,4
0004ce 8be8      	STD  Y+16,R30
0004cf 8bf9      	STD  Y+16+1,R31
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0004d1 85ad      	LDD  R26,Y+13
0004d2 85be      	LDD  R27,Y+13+1
0004d3 85ef      	LDD  R30,Y+15
0004d4 89f8      	LDD  R31,Y+15+1
0004d5 9509      	ICALL
0004d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0004d7 89a8      	LDD  R26,Y+16
0004d8 89b9      	LDD  R27,Y+16+1
0004d9 9614      	ADIW R26,4
0004da 940e 069c 	CALL __GETW1P
0004dc 83ee      	STD  Y+6,R30
0004dd 83ff      	STD  Y+6+1,R31
0004de 81ae      	LDD  R26,Y+6
0004df 81bf      	LDD  R27,Y+6+1
0004e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0004e1 89a8      	LDD  R26,Y+16
0004e2 89b9      	LDD  R27,Y+16+1
0004e3 9614      	ADIW R26,4
0004e4 940e 069c 	CALL __GETW1P
0004e6 87ea      	STD  Y+10,R30
0004e7 87fb      	STD  Y+10+1,R31
0004e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0004e9 01de      	MOVW R26,R28
0004ea 961c      	ADIW R26,12
0004eb 940e 067d 	CALL __ADDW2R15
0004ed 940e 069c 	CALL __GETW1P
0004ef 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004f0 9610      	adiw r26,0
0004f1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004f2 ed80     +LDI R24 , LOW ( 0x7D0 )
0004f3 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004f4 9701     +SBIW R24 , 1
0004f5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004f6 95a8      	wdr
0004f7 9711      	sbiw r26,1
0004f8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004f9 9508      	ret
                 
                 __ROUND_REPACK:
0004fa 2355      	TST  R21
0004fb f442      	BRPL __REPACK
0004fc 3850      	CPI  R21,0x80
0004fd f411      	BRNE __ROUND_REPACK0
0004fe ffe0      	SBRS R30,0
0004ff c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000500 9631      	ADIW R30,1
000501 1f69      	ADC  R22,R25
000502 1f79      	ADC  R23,R25
000503 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000504 e850      	LDI  R21,0x80
000505 2757      	EOR  R21,R23
000506 f411      	BRNE __REPACK0
000507 935f      	PUSH R21
000508 c0cf      	RJMP __ZERORES
                 __REPACK0:
000509 3f5f      	CPI  R21,0xFF
00050a f031      	BREQ __REPACK1
00050b 0f66      	LSL  R22
00050c 0c00      	LSL  R0
00050d 9557      	ROR  R21
00050e 9567      	ROR  R22
00050f 2f75      	MOV  R23,R21
000510 9508      	RET
                 __REPACK1:
000511 935f      	PUSH R21
000512 2000      	TST  R0
000513 f00a      	BRMI __REPACK2
000514 c0cf      	RJMP __MAXRES
                 __REPACK2:
000515 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000516 e850      	LDI  R21,0x80
000517 2e19      	MOV  R1,R25
000518 2215      	AND  R1,R21
000519 0f88      	LSL  R24
00051a 1f99      	ROL  R25
00051b 2795      	EOR  R25,R21
00051c 0f55      	LSL  R21
00051d 9587      	ROR  R24
                 
                 __UNPACK1:
00051e e850      	LDI  R21,0x80
00051f 2e07      	MOV  R0,R23
000520 2205      	AND  R0,R21
000521 0f66      	LSL  R22
000522 1f77      	ROL  R23
000523 2775      	EOR  R23,R21
000524 0f55      	LSL  R21
000525 9567      	ROR  R22
000526 9508      	RET
                 
                 __CFD1U:
000527 9468      	SET
000528 c001      	RJMP __CFD1U0
                 __CFD1:
000529 94e8      	CLT
                 __CFD1U0:
00052a 935f      	PUSH R21
00052b dff2      	RCALL __UNPACK1
00052c 3870      	CPI  R23,0x80
00052d f018      	BRLO __CFD10
00052e 3f7f      	CPI  R23,0xFF
00052f f408      	BRCC __CFD10
000530 c0a7      	RJMP __ZERORES
                 __CFD10:
000531 e156      	LDI  R21,22
000532 1b57      	SUB  R21,R23
000533 f4aa      	BRPL __CFD11
000534 9551      	NEG  R21
000535 3058      	CPI  R21,8
000536 f40e      	BRTC __CFD19
000537 3059      	CPI  R21,9
                 __CFD19:
000538 f030      	BRLO __CFD17
000539 efef      	SER  R30
00053a efff      	SER  R31
00053b ef6f      	SER  R22
00053c e77f      	LDI  R23,0x7F
00053d f977      	BLD  R23,7
00053e c01a      	RJMP __CFD15
                 __CFD17:
00053f 2777      	CLR  R23
000540 2355      	TST  R21
000541 f0b9      	BREQ __CFD15
                 __CFD18:
000542 0fee      	LSL  R30
000543 1fff      	ROL  R31
000544 1f66      	ROL  R22
000545 1f77      	ROL  R23
000546 955a      	DEC  R21
000547 f7d1      	BRNE __CFD18
000548 c010      	RJMP __CFD15
                 __CFD11:
000549 2777      	CLR  R23
                 __CFD12:
00054a 3058      	CPI  R21,8
00054b f028      	BRLO __CFD13
00054c 2fef      	MOV  R30,R31
00054d 2ff6      	MOV  R31,R22
00054e 2f67      	MOV  R22,R23
00054f 5058      	SUBI R21,8
000550 cff9      	RJMP __CFD12
                 __CFD13:
000551 2355      	TST  R21
000552 f031      	BREQ __CFD15
                 __CFD14:
000553 9576      	LSR  R23
000554 9567      	ROR  R22
000555 95f7      	ROR  R31
000556 95e7      	ROR  R30
000557 955a      	DEC  R21
000558 f7d1      	BRNE __CFD14
                 __CFD15:
000559 2000      	TST  R0
00055a f40a      	BRPL __CFD16
00055b d129      	RCALL __ANEGD1
                 __CFD16:
00055c 915f      	POP  R21
00055d 9508      	RET
                 
                 __CDF1U:
00055e 9468      	SET
00055f c001      	RJMP __CDF1U0
                 __CDF1:
000560 94e8      	CLT
                 __CDF1U0:
000561 9730      	SBIW R30,0
000562 4060      	SBCI R22,0
000563 4070      	SBCI R23,0
000564 f0b1      	BREQ __CDF10
000565 2400      	CLR  R0
000566 f026      	BRTS __CDF11
000567 2377      	TST  R23
000568 f412      	BRPL __CDF11
000569 9400      	COM  R0
00056a d11a      	RCALL __ANEGD1
                 __CDF11:
00056b 2e17      	MOV  R1,R23
00056c e17e      	LDI  R23,30
00056d 2011      	TST  R1
                 __CDF12:
00056e f032      	BRMI __CDF13
00056f 957a      	DEC  R23
000570 0fee      	LSL  R30
000571 1fff      	ROL  R31
000572 1f66      	ROL  R22
000573 1c11      	ROL  R1
000574 cff9      	RJMP __CDF12
                 __CDF13:
000575 2fef      	MOV  R30,R31
000576 2ff6      	MOV  R31,R22
000577 2d61      	MOV  R22,R1
000578 935f      	PUSH R21
000579 df8a      	RCALL __REPACK
00057a 915f      	POP  R21
                 __CDF10:
00057b 9508      	RET
                 
                 __SWAPACC:
00057c 934f      	PUSH R20
00057d 01af      	MOVW R20,R30
00057e 01fd      	MOVW R30,R26
00057f 01da      	MOVW R26,R20
000580 01ab      	MOVW R20,R22
000581 01bc      	MOVW R22,R24
000582 01ca      	MOVW R24,R20
000583 2d40      	MOV  R20,R0
000584 2c01      	MOV  R0,R1
000585 2e14      	MOV  R1,R20
000586 914f      	POP  R20
000587 9508      	RET
                 
                 __UADD12:
000588 0fea      	ADD  R30,R26
000589 1ffb      	ADC  R31,R27
00058a 1f68      	ADC  R22,R24
00058b 9508      	RET
                 
                 __NEGMAN1:
00058c 95e0      	COM  R30
00058d 95f0      	COM  R31
00058e 9560      	COM  R22
00058f 5fef      	SUBI R30,-1
000590 4fff      	SBCI R31,-1
000591 4f6f      	SBCI R22,-1
000592 9508      	RET
                 
                 __SUBF12:
000593 935f      	PUSH R21
000594 df81      	RCALL __UNPACK
000595 3890      	CPI  R25,0x80
000596 f171      	BREQ __ADDF129
000597 e850      	LDI  R21,0x80
000598 2615      	EOR  R1,R21
                 
000599 c004      	RJMP __ADDF120
                 
                 __ADDF12:
00059a 935f      	PUSH R21
00059b df7a      	RCALL __UNPACK
00059c 3890      	CPI  R25,0x80
00059d f139      	BREQ __ADDF129
                 
                 __ADDF120:
00059e 3870      	CPI  R23,0x80
00059f f121      	BREQ __ADDF128
                 __ADDF121:
0005a0 2f57      	MOV  R21,R23
0005a1 1b59      	SUB  R21,R25
0005a2 f12b      	BRVS __ADDF1211
0005a3 f412      	BRPL __ADDF122
0005a4 dfd7      	RCALL __SWAPACC
0005a5 cffa      	RJMP __ADDF121
                 __ADDF122:
0005a6 3158      	CPI  R21,24
0005a7 f018      	BRLO __ADDF123
0005a8 27aa      	CLR  R26
0005a9 27bb      	CLR  R27
0005aa 2788      	CLR  R24
                 __ADDF123:
0005ab 3058      	CPI  R21,8
0005ac f028      	BRLO __ADDF124
0005ad 2fab      	MOV  R26,R27
0005ae 2fb8      	MOV  R27,R24
0005af 2788      	CLR  R24
0005b0 5058      	SUBI R21,8
0005b1 cff9      	RJMP __ADDF123
                 __ADDF124:
0005b2 2355      	TST  R21
0005b3 f029      	BREQ __ADDF126
                 __ADDF125:
0005b4 9586      	LSR  R24
0005b5 95b7      	ROR  R27
0005b6 95a7      	ROR  R26
0005b7 955a      	DEC  R21
0005b8 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005b9 2d50      	MOV  R21,R0
0005ba 2551      	EOR  R21,R1
0005bb f072      	BRMI __ADDF127
0005bc dfcb      	RCALL __UADD12
0005bd f438      	BRCC __ADDF129
0005be 9567      	ROR  R22
0005bf 95f7      	ROR  R31
0005c0 95e7      	ROR  R30
0005c1 9573      	INC  R23
0005c2 f413      	BRVC __ADDF129
0005c3 c020      	RJMP __MAXRES
                 __ADDF128:
0005c4 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005c5 df3e      	RCALL __REPACK
0005c6 915f      	POP  R21
0005c7 9508      	RET
                 __ADDF1211:
0005c8 f7d8      	BRCC __ADDF128
0005c9 cffb      	RJMP __ADDF129
                 __ADDF127:
0005ca 1bea      	SUB  R30,R26
0005cb 0bfb      	SBC  R31,R27
0005cc 0b68      	SBC  R22,R24
0005cd f051      	BREQ __ZERORES
0005ce f410      	BRCC __ADDF1210
0005cf 9400      	COM  R0
0005d0 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005d1 2366      	TST  R22
0005d2 f392      	BRMI __ADDF129
0005d3 0fee      	LSL  R30
0005d4 1fff      	ROL  R31
0005d5 1f66      	ROL  R22
0005d6 957a      	DEC  R23
0005d7 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0005d8 27ee      	CLR  R30
0005d9 27ff      	CLR  R31
0005da 2766      	CLR  R22
0005db 2777      	CLR  R23
0005dc 915f      	POP  R21
0005dd 9508      	RET
                 
                 __MINRES:
0005de efef      	SER  R30
0005df efff      	SER  R31
0005e0 e76f      	LDI  R22,0x7F
0005e1 ef7f      	SER  R23
0005e2 915f      	POP  R21
0005e3 9508      	RET
                 
                 __MAXRES:
0005e4 efef      	SER  R30
0005e5 efff      	SER  R31
0005e6 e76f      	LDI  R22,0x7F
0005e7 e77f      	LDI  R23,0x7F
0005e8 915f      	POP  R21
0005e9 9508      	RET
                 
                 __MULF12:
0005ea 935f      	PUSH R21
0005eb df2a      	RCALL __UNPACK
0005ec 3870      	CPI  R23,0x80
0005ed f351      	BREQ __ZERORES
0005ee 3890      	CPI  R25,0x80
0005ef f341      	BREQ __ZERORES
0005f0 2401      	EOR  R0,R1
0005f1 9408      	SEC
0005f2 1f79      	ADC  R23,R25
0005f3 f423      	BRVC __MULF124
0005f4 f31c      	BRLT __ZERORES
                 __MULF125:
0005f5 2000      	TST  R0
0005f6 f33a      	BRMI __MINRES
0005f7 cfec      	RJMP __MAXRES
                 __MULF124:
0005f8 920f      	PUSH R0
0005f9 931f      	PUSH R17
0005fa 932f      	PUSH R18
0005fb 933f      	PUSH R19
0005fc 934f      	PUSH R20
0005fd 2711      	CLR  R17
0005fe 2722      	CLR  R18
0005ff 2799      	CLR  R25
000600 9f68      	MUL  R22,R24
000601 01a0      	MOVW R20,R0
000602 9f8f      	MUL  R24,R31
000603 2d30      	MOV  R19,R0
000604 0d41      	ADD  R20,R1
000605 1f59      	ADC  R21,R25
000606 9f6b      	MUL  R22,R27
000607 0d30      	ADD  R19,R0
000608 1d41      	ADC  R20,R1
000609 1f59      	ADC  R21,R25
00060a 9f8e      	MUL  R24,R30
00060b d027      	RCALL __MULF126
00060c 9fbf      	MUL  R27,R31
00060d d025      	RCALL __MULF126
00060e 9f6a      	MUL  R22,R26
00060f d023      	RCALL __MULF126
000610 9fbe      	MUL  R27,R30
000611 d01d      	RCALL __MULF127
000612 9faf      	MUL  R26,R31
000613 d01b      	RCALL __MULF127
000614 9fae      	MUL  R26,R30
000615 0d11      	ADD  R17,R1
000616 1f29      	ADC  R18,R25
000617 1f39      	ADC  R19,R25
000618 1f49      	ADC  R20,R25
000619 1f59      	ADC  R21,R25
00061a 2fe3      	MOV  R30,R19
00061b 2ff4      	MOV  R31,R20
00061c 2f65      	MOV  R22,R21
00061d 2f52      	MOV  R21,R18
00061e 914f      	POP  R20
00061f 913f      	POP  R19
000620 912f      	POP  R18
000621 911f      	POP  R17
000622 900f      	POP  R0
000623 2366      	TST  R22
000624 f02a      	BRMI __MULF122
000625 0f55      	LSL  R21
000626 1fee      	ROL  R30
000627 1fff      	ROL  R31
000628 1f66      	ROL  R22
000629 c002      	RJMP __MULF123
                 __MULF122:
00062a 9573      	INC  R23
00062b f24b      	BRVS __MULF125
                 __MULF123:
00062c decd      	RCALL __ROUND_REPACK
00062d 915f      	POP  R21
00062e 9508      	RET
                 
                 __MULF127:
00062f 0d10      	ADD  R17,R0
000630 1d21      	ADC  R18,R1
000631 1f39      	ADC  R19,R25
000632 c002      	RJMP __MULF128
                 __MULF126:
000633 0d20      	ADD  R18,R0
000634 1d31      	ADC  R19,R1
                 __MULF128:
000635 1f49      	ADC  R20,R25
000636 1f59      	ADC  R21,R25
000637 9508      	RET
                 
                 __DIVF21:
000638 935f      	PUSH R21
000639 dedc      	RCALL __UNPACK
00063a 3870      	CPI  R23,0x80
00063b f421      	BRNE __DIVF210
00063c 2011      	TST  R1
                 __DIVF211:
00063d f40a      	BRPL __DIVF219
00063e cf9f      	RJMP __MINRES
                 __DIVF219:
00063f cfa4      	RJMP __MAXRES
                 __DIVF210:
000640 3890      	CPI  R25,0x80
000641 f409      	BRNE __DIVF218
                 __DIVF217:
000642 cf95      	RJMP __ZERORES
                 __DIVF218:
000643 2401      	EOR  R0,R1
000644 9408      	SEC
000645 0b97      	SBC  R25,R23
000646 f41b      	BRVC __DIVF216
000647 f3d4      	BRLT __DIVF217
000648 2000      	TST  R0
000649 cff3      	RJMP __DIVF211
                 __DIVF216:
00064a 2f79      	MOV  R23,R25
00064b 931f      	PUSH R17
00064c 932f      	PUSH R18
00064d 933f      	PUSH R19
00064e 934f      	PUSH R20
00064f 2411      	CLR  R1
000650 2711      	CLR  R17
000651 2722      	CLR  R18
000652 2733      	CLR  R19
000653 2744      	CLR  R20
000654 2755      	CLR  R21
000655 e290      	LDI  R25,32
                 __DIVF212:
000656 17ae      	CP   R26,R30
000657 07bf      	CPC  R27,R31
000658 0786      	CPC  R24,R22
000659 0741      	CPC  R20,R17
00065a f030      	BRLO __DIVF213
00065b 1bae      	SUB  R26,R30
00065c 0bbf      	SBC  R27,R31
00065d 0b86      	SBC  R24,R22
00065e 0b41      	SBC  R20,R17
00065f 9408      	SEC
000660 c001      	RJMP __DIVF214
                 __DIVF213:
000661 9488      	CLC
                 __DIVF214:
000662 1f55      	ROL  R21
000663 1f22      	ROL  R18
000664 1f33      	ROL  R19
000665 1c11      	ROL  R1
000666 1faa      	ROL  R26
000667 1fbb      	ROL  R27
000668 1f88      	ROL  R24
000669 1f44      	ROL  R20
00066a 959a      	DEC  R25
00066b f751      	BRNE __DIVF212
00066c 01f9      	MOVW R30,R18
00066d 2d61      	MOV  R22,R1
00066e 914f      	POP  R20
00066f 913f      	POP  R19
000670 912f      	POP  R18
000671 911f      	POP  R17
000672 2366      	TST  R22
000673 f032      	BRMI __DIVF215
000674 0f55      	LSL  R21
000675 1fee      	ROL  R30
000676 1fff      	ROL  R31
000677 1f66      	ROL  R22
000678 957a      	DEC  R23
000679 f243      	BRVS __DIVF217
                 __DIVF215:
00067a de7f      	RCALL __ROUND_REPACK
00067b 915f      	POP  R21
00067c 9508      	RET
                 
                 __ADDW2R15:
00067d 2400      	CLR  R0
00067e 0daf      	ADD  R26,R15
00067f 1db0      	ADC  R27,R0
000680 9508      	RET
                 
                 __ANEGW1:
000681 95f1      	NEG  R31
000682 95e1      	NEG  R30
000683 40f0      	SBCI R31,0
000684 9508      	RET
                 
                 __ANEGD1:
000685 95f0      	COM  R31
000686 9560      	COM  R22
000687 9570      	COM  R23
000688 95e1      	NEG  R30
000689 4fff      	SBCI R31,-1
00068a 4f6f      	SBCI R22,-1
00068b 4f7f      	SBCI R23,-1
00068c 9508      	RET
                 
                 __LSLW2:
00068d 0fee      	LSL  R30
00068e 1fff      	ROL  R31
00068f 0fee      	LSL  R30
000690 1fff      	ROL  R31
000691 9508      	RET
                 
                 __MULW2_4:
000692 0faa      	LSL  R26
000693 1fbb      	ROL  R27
000694 0faa      	LSL  R26
000695 1fbb      	ROL  R27
000696 9508      	RET
                 
                 __CWD1:
000697 2f6f      	MOV  R22,R31
000698 0f66      	ADD  R22,R22
000699 0b66      	SBC  R22,R22
00069a 2f76      	MOV  R23,R22
00069b 9508      	RET
                 
                 __GETW1P:
00069c 91ed      	LD   R30,X+
00069d 91fc      	LD   R31,X
00069e 9711      	SBIW R26,1
00069f 9508      	RET
                 
                 __GETD1P:
0006a0 91ed      	LD   R30,X+
0006a1 91fd      	LD   R31,X+
0006a2 916d      	LD   R22,X+
0006a3 917c      	LD   R23,X
0006a4 9713      	SBIW R26,3
0006a5 9508      	RET
                 
                 __PUTDP1:
0006a6 93ed      	ST   X+,R30
0006a7 93fd      	ST   X+,R31
0006a8 936d      	ST   X+,R22
0006a9 937c      	ST   X,R23
0006aa 9508      	RET
                 
                 __GETW1PF:
0006ab 9005      	LPM  R0,Z+
0006ac 91f4      	LPM  R31,Z
0006ad 2de0      	MOV  R30,R0
0006ae 9508      	RET
                 
                 __PUTPARD1:
0006af 937a      	ST   -Y,R23
0006b0 936a      	ST   -Y,R22
0006b1 93fa      	ST   -Y,R31
0006b2 93ea      	ST   -Y,R30
0006b3 9508      	RET
                 
                 __SWAPD12:
0006b4 2e18      	MOV  R1,R24
0006b5 2f86      	MOV  R24,R22
0006b6 2d61      	MOV  R22,R1
0006b7 2e19      	MOV  R1,R25
0006b8 2f97      	MOV  R25,R23
0006b9 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0006ba 2e1b      	MOV  R1,R27
0006bb 2fbf      	MOV  R27,R31
0006bc 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0006bd 2e1a      	MOV  R1,R26
0006be 2fae      	MOV  R26,R30
0006bf 2de1      	MOV  R30,R1
0006c0 9508      	RET
                 
                 __SAVELOCR6:
0006c1 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006c2 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006c3 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006c4 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006c5 931a      	ST   -Y,R17
0006c6 930a      	ST   -Y,R16
0006c7 9508      	RET
                 
                 __LOADLOCR6:
0006c8 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0006c9 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0006ca 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0006cb 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0006cc 8119      	LDD  R17,Y+1
0006cd 8108      	LD   R16,Y
0006ce 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  37 r1 :  30 r2 :   0 r3 :   0 r4 :   9 r5 :   1 r6 :   4 r7 :   4 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  48 r17:  71 r18:  41 r19:  24 r20:  33 r21:  80 r22:  61 r23:  49 
r24:  47 r25:  37 r26: 170 r27:  90 r28:  19 r29:   1 r30: 258 r31: 125 
x  :  37 y  : 171 z  :  18 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  27 add   :  19 
adiw  :  31 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  29 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   3 brmi  :   8 brne  :  47 brpl  :   7 brsh  :   4 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 110 
cbi   :  15 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   8 cpc   :   7 cpi   :  62 cpse  :   0 dec   :  12 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  24 ld    :  37 ldd   :  77 ldi   : 155 
lds   :   4 lpm   :  14 lsl   :  15 lsr   :   2 mov   :  74 movw  :  41 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  13 pop   :  47 push  :  47 rcall :  41 ret   :  53 
reti  :   0 rjmp  : 123 rol   :  28 ror   :  12 sbc   :   8 sbci  :  15 
sbi   :   9 sbic  :   4 sbis  :  12 sbiw  :  24 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  35 sts   :   2 sub   :   5 subi  :  31 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d9e   3426     60   3486   32768  10.6%
[.dseg] 0x000060 0x000280      0     32     32    2048   1.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
